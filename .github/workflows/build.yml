name: "Build and populate cache"
on:
  repository_dispatch:
    types: [trigger-second-workflow]
  pull_request:
  push:
    branches:
      - main
      - master
    paths:
      - '**.nix'
      - '!_sources/**.nix'
      - '!pkgs/**/update.py'
      - '!pkgs/**/update.sh'
  workflow_dispatch:

jobs:
  use_branch:
    runs-on: ubuntu-latest
    outputs:
      MY_TARGET_BRANCH: ${{ steps.determine_branch.outputs.runbranch }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
      - name: get last commit time of master branch
        id: get_master_time
        run: |
          git fetch origin master
          MASTER_COMMIT_TIME=$(git log -1 --format=%ct origin/master)
          echo "Current flakebot Last commit time is ${MASTER_COMMIT_TIME}"
          echo "MASTER_COMMIT_TIME=${MASTER_COMMIT_TIME}" >> $GITHUB_ENV
      - name: get last commit time of flakebot
        id: get_flakebot_time
        run: |
          git fetch origin flakebot
          FLAKEBOT_COMMIT_TIME=$(git log -1 --format=%ct origin/flakebot)
          echo "Current flakebot Last commit time is ${FLAKEBOT_COMMIT_TIME}"
          echo "FLAKEBOT_COMMIT_TIME=${FLAKEBOT_COMMIT_TIME}" >> $GITHUB_ENV
      - name: use target branch
        id: determine_branch
        run: |
          if [[ "${MASTER_COMMIT_TIME}" -gt "${FLAKEBOT_COMMIT_TIME}" ]]; then
            echo "Will be working on master branch"
            echo "runbranch=master" >> $GITHUB_OUTPUT
          else
            echo "Will be working on flakebot branch"
            echo "runbranch=flakebot" >> $GITHUB_OUTPUT
          fi
  build-packages:
    needs: use_branch
    strategy:
      fail-fast: false
      matrix:
        # Set this to notify the global nur package registry that changes are
        # available.
        #
        # The repo name as used in
        # https://github.com/nix-community/NUR/blob/master/repos.json
        nurRepo:
          - shanyouli
        # Set this to cache your build results in cachix for faster builds
        # in CI and for everyone who uses your cache.
        #
        # Format: Your cachix cache host name without the ".cachix.org" suffix.
        # Example: mycache (for mycache.cachix.org)
        #
        # For this to work, you also need to set the CACHIX_SIGNING_KEY or
        # CACHIX_AUTH_TOKEN secret in your repository secrets settings in
        # Github found at
        # https://github.com/<your_githubname>/nur-packages/settings/secrets
        cachixName:
          - shanyouli
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    env:
      MY_TARGET_BRANCH: ${{ needs.use_branch.outputs.MY_TARGET_BRANCH }}
    outputs:
      MY_MODIFY: ${{ steps.modify_code.outputs.MY_MODIFY }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        ref: '${{ needs.use_branch.outputs.MY_TARGET_BRANCH }}'
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      if: ${{ matrix.os == 'ubuntu-latest' }}
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - name: Free Disk Space (macos)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        df -h
        brew list
        [[ -d /Applications/Xcode_16.1_beta.app ]] && sudo rm -rf /Applications/Xcode_16.1_beta.app
        [[ -d /Applications/Xcode_16_beta_6.app ]] && sudo rm -rf /Applications/Xcode_16_beta_6.app
        [[ -d /Applications/Xcode_15.1.app ]] && sudo rm -rf /Applications/Xcode_15.1.app
        [[ -d /Applications/Xcode_15.2.app ]] && sudo rm -rf  /Applications/Xcode_15.2.app
        [[ -d /Applications/Xcode_15.3.app ]] && sudo rm -rf  /Applications/Xcode_15.3.app
        [[ -d /Applications/Xcode_14.3.1.app ]] && sudo rm -rf /Applications/Xcode_14.3.1.app
        [[ -d /Applications/Xcode_15.0.1.app ]] && sudo rm -rf /Applications/Xcode_15.0.1.app
        brew uninstall --zap google-chrome
        df -h
    - name: Install nix
      uses: cachix/install-nix-action@v31
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    - name: Setup cachix
      uses: cachix/cachix-action@v16
      # Don't replace <YOUR_CACHIX_NAME> here!
      if: ${{ matrix.cachixName != '<YOUR_CACHIX_NAME>' }}
      with:
        name: '${{ matrix.cachixName }}'
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Check evaluation
      run: nix flake show
    - name: Build nix packages
      run: nix run .#ci
      timeout-minutes: 240
    - name: modify code
      id: modify_code
      run: |
        if git status | grep "modified" ; then
          echo "MY_MODIFY=true" >> $GITHUB_ENV
          echo "MY_MODIFY=true" >> $GITHUB_OUTPUT
          git fetch origin
          if git ls-remote origin refs/heads/temp-branch-${{ matrix.os }} | grep temp-branch ; then
            git push origin --delete temp-branch-${{ matrix.os }}
          fi
        fi
    - name: Commit back to repository
      if: ${{ env.MY_MODIFY  == 'true' }}
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: 'auto: update package hashes ${{ matrix.os }}'
        create_branch: true
        branch: temp-branch-${{ matrix.os }}

  publish-stable:
    needs:
      - use_branch
      - build-packages
    runs-on: ubuntu-latest
    env:
      MY_TARGET_BRANCH: ${{ needs.use_branch.outputs.MY_TARGET_BRANCH }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: '${{ needs.use_branch.outputs.MY_TARGET_BRANCH }}'
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
      - name: Prepare flakebot branch
        run: |
          git config --local user.email "flakebot@users.noreply.github.com"
          git config --local user.name "flakebot"
      - name: Merge os chanages
        if: needs.build-packages.outputs.MY_MODIFY == 'true'
        run: |
          git fetch origin
          echo "Getting information about all branches."
          echo "Merging of branch temp-branch-macos-latest"
          if git ls-remote origin refs/heads/temp-branch-macos-latest | grep temp-branch-macos-latest ; then
            if git diff origin/temp-branch-macos-latest | grep "+++"; then
              git checkout origin/temp-branch-macos-latest
              echo "MY_MERGE_MACOS=true" >> $GITHUB_ENV
            fi
          fi
      - name: merge-to-master with macos-latest
        if: ${{ env.MY_MERGE_MACOS == 'true'}}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: '${{ needs.use_branch.outputs.MY_TARGET_BRANCH }}'
          force: true
      - name: merge ubuntu chanages
        if: needs.build-packages.outputs.MY_MODIFY == 'true'
        run: |
          git fetch origin
          git checkout $MY_TARGET_BRANCH
          git pull
          echo "Merging of branch temp-branch-ubuntu-latest"
          if git ls-remote origin refs/heads/temp-branch-ubuntu-latest | grep temp-branch-ubuntu-latest ; then
            if git diff origin/temp-branch-ubuntu-latest | grep "+++"; then
              git checkout origin/temp-branch-ubuntu-latest
              echo "MY_MERGE_LINUX=true" >> $GITHUB_ENV
            fi
          fi
      - name: merge-to-master with macos-latest
        if: ${{ env.MY_MERGE_LINUX == 'true'}}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: '${{ needs.use_branch.outputs.MY_TARGET_BRANCH }}'
          force: true
      - name: Install nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: update README.md
        run: |
          git fetch
          git checkout $MY_TARGET_BRANCH
          git pull
          nix run .#readme
      - name: Push stable
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: 'master'
          force: true
      - name: switch stable
        run: git checkout -B stable
      - name: Push stable
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: 'stable'
          force: true
